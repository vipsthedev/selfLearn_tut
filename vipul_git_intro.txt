Training >> 2. GIT Back
Trainer: Samir
Introduction:
In this phase of training, trainee will learn about GIT commands, how to use those commands in regular project
practise.
Topics to study


1.  Make GIT repository

	To create a new Git repository, you have two main options:

	1.1.Initialize a New Git Repository Locally: This is useful if you want to start tracking an existing project with Git.
	1.2.Create a New Repository on GitHub/GitLab/Bitbucket and Clone It: This method involves setting up a repository on a remote Git hosting platform and then cloning it to your local machine.


	1. Initialize a New Git Repository Locally


		Step 1: Open Your Terminal or Command Prompt
			Navigate to the root directory of your project:
				cd path/to/your/project
		Step 2: Initialize a New Git Repository
			Run the following command to initialize a new Git repository in your project directory

			git init

				-This command creates a .git folder in your project's root directory. This folder contains all the necessary metadata and object files that Git needs to track changes in your project.

		Step 3: Add Files to the Repository

			You need to add the files you want to track to the staging area. You can add all files in the directory by running:

				git add .

		Step 4: Commit the Changes

			git commit -m "Initial commit"


2.  Clone GIT repository

	- Create a New Repository on GitHub, GitLab, or Bitbucket and Clone It
	- Once you've created the repository, you'll see a URL (either HTTPS or SSH). Use this URL to clone the repository to your local machine.

	Sign in to your account.

		Look for the option to create a new repository (usually a "New" button or "+" icon).

		Fill out the repository information:

		-Repository name: The name of your repository.
		-Description (optional): A description of the repository.
		-Public/Private: Set the visibility of the repository.
		-Initialize with README: (Optional) Create a README file if desired.
		-Click "Create repository" (the button text might vary depending on the platform).

	1)HTTP

		-Step 1 CLONE URL
			
			https://github.com/vipsthedev/selfLearn_tut.git

		-Step 2: Add Files and Make Your First Commit
	   		cd  vipul_selfLearn_tut

		-Example

		git clone https://github.com/vipsthedev/selfLearn_tut.git
		PS C:\wamp64\www\selfLearn_tut> git status
		
		On branch main
		Your branch is up to date with 'origin/main'.

		nothing to commit, working tree clean



	-------------

	2)SSH
		if you're using SSH:
		
			git clone git@github.com:username/repository.git

	- Additional Setup for a Remote Repository

	  If you initialized a local repository and want to connect it to a remote repository, you can add the remote URL using:

	    git remote add origin https://github.com/username/repository.git

	    Then push your changes to the remote repository:

	    git push -u origin main

3.  Add global configration like name, email

	- To set up global configurations such as your name and email in Git, use the following commands. This sets the information that will be used in all repositories on your machine.


	1. Set Your Name and Email Globally

		Run these commands in your terminal or command prompt to configure your Git username and email globally:

			git config --global user.name "Your Name"
			git config --global user.email "youremail@example.com"

			Replace "Your Name" with your actual name.
			Replace "youremail@example.com" with your email address.
	
	2. Verify Your Global Configuration

		You can verify that your global configuration has been set by running:

		git config --global --list


		output

		PS C:\wamp64\www\selfLearn_tut> git config --global --list
			user.email=vipul@indolytics.com
			user.name=vipul agravat
			user.password=vipul123456789

	3. Local Configuration (Optional)

		If you want to set the name and email for a specific repository (overriding the global configuration), navigate to that repository's directory and run:

			git config user.name "Specific Repo Name"
			git config user.email "specificrepo@example.com"

	4. Additional Global Configuration


		You can set other global configurations as well, such as the default text editor for Git:

			git config --global core.editor "vim"

			On Windows:

				git config --global core.autocrlf true
				

	5. Configuration File Location

		- The global configuration is stored in a file called .gitconfig in your home directory. You can also edit this file directly to change the settings:

		On Windows: C:\Users\YourUsername\.gitconfig
		On macOS/Linux: ~/.gitconfig

4.  Add files to GIT repositry

	- Add your project files to this directory. Then run:
		git add .
		git commit -m "Initial commit"

	- To add files to a Git repository, you'll go through a few simple steps. 
	  These involve moving your changes into the staging area and then committing them to the repository. 
	  Here’s a detailed explanation of each step

	  	1. Navigate to Your Repository
		2. Check Repository Status
			Before adding files, it's often helpful to see the current status of your repository using:
				git status
		3. Add Files to the Staging Area

			The staging area is where you prepare files that you want to commit. Here’s how to add files to it:


			Option 1: Add All Files

					To add all changes (new files, modified files, and deleted files) in the repository to the staging area, use:

						git add .
						/
						git add -A

							git add . adds all changes in the current directory and all nested subdirectories.

							git add -A stages all changes in the repository, including those outside the current directory. This is equivalent to git add --all.


					
					The . tells Git to add all changes in the current directory and its subdirectories.

			Option 2: Add Specific Files

				If you want to add specific files or directories, specify them like this:
					git add filename1 filename2
				Example	

					git add vipul_selfLearn_tut.text vipul.txt

				You can also add an entire directory:

					git add /php/

			Option 3: Add Changes to a Specific Type of Files

				You can use wildcards to add files of a specific type. For example, to add all .html files:

					git add *.html

			Option 4: Add Changes Interactively

				git add -p


					The -p (or --patch) option opens an interactive mode that allows you to review each change before staging it. This is useful if you want to stage only certain parts of a file.
			
			Option 5: Adding Files in an Ignored Directory

					If you need to add files in a directory that is listed in .gitignore but still want to track some specific files, use the -f flag:

					git add -f path/to/ignored/file.txt

					The -f (or --force) option forces Git to add files that would otherwise be ignored.

		4. Check the Staging Area (Optional)
			
				git status

				Files that are ready to be committed will be shown in green under the "Changes to be committed" section.

		5. Commit the Staged Files


			Once the files are staged, you need to commit them to the repository. This creates a snapshot of the changes in the repository’s history. Use the following command:

			git commit -m "Your commit message here"

	 -  6. Push Changes to Remote Repository (If Applicable)

			- If your repository is connected to a remote server (e.g., GitHub, GitLab, Bitbucket), you'll need to push the changes to make them available on the remote server.
			- If you have made changes to the local repository and want to push them to the remote repository:

		 		git push origin main
		 	
		 	- Note: The default branch might be named main or master. Make sure to use the correct branch name based on your repository settings.
		
		7. Understanding the Staging Area and Committing

			Staging Area: When you use git add, you move files to the staging area. This area allows you to group changes before committing them. You can add files to the staging area incrementally to commit only specific changes.
			Committing: A commit in Git creates a snapshot of the changes. You should always write clear and concise commit messages to describe the changes, as this helps in understanding the project's history.


		Additional Notes
			Ignoring Files
			
				If there are files that you do not want to track (like configuration files, environment files, or build artifacts), you can create a .gitignore file in your repository’s root directory. List the files and directories to ignore in this file.
				Example
					# .gitignore
						node_modules/
						.env
						.DS_Store

			Removing Files

				If you need to remove files from the repository, you can use:

				git rm filename
				git commit -m "Removed filename"

				- To stop tracking a file but keep it locally, use:

					git rm --cached filename

5.  Pull GIT repository

	Pulling a Git repository means fetching the latest changes from a remote repository and integrating them into your local repository. This command combines two Git operations: fetching (retrieving new data from the remote) and merging (integrating the new changes into your local branch)

	Pulling Changes from the Remote Repository

		The git pull command is used to fetch changes from the remote repository and merge them into your local branch. Here’s the general syntax:

		git pull <remote> <branch>

			<remote>: The name of the remote repository (usually origin by default).
			<branch>: The name of the branch you want to pull from (usually main or master).

		Example
			git pull origin main


				Fetch: Downloads the latest changes from the main branch of the origin remote.
				
				Merge: Combines those changes with your current branch.

		1. Understanding the Process

			=> If there are no conflicts between your local changes and the remote changes, the merge will happen automatically.

		2.Handling Merge Conflicts

			=> Sometimes, you may have conflicts between your local changes and the changes in the remote repository. When this happens, Git will prompt you to resolve the conflicts manually.
			=>Example

				if there is a conflict in a file, Git will modify the file to show both your local changes and the changes from the remote:


				<<<<<<< HEAD
				Your local changes
				=======
				Changes from the remote repository
				>>>>>>> branch-name

				You need to manually edit the file to resolve the conflict, and then use the following commands to continue:

					git add <conflicted-file>
					git commit -m "Resolved merge conflict"

		3. Checking the Remote Repository
			To see which remote repository is connected to your local repository, you can use:

				C:\wamp64\www\selfLearn_tut>git remote -v
					origin  https://github.com/vipsthedev/selfLearn_tut.git (fetch)
					origin  https://github.com/vipsthedev/selfLearn_tut.git (push)

		4. Using git pull --rebase (Optional)

			The git pull --rebase command is an alternative to the standard git pull command that, instead of performing a merge, performs a rebase. This can help maintain a cleaner, linear Git history by avoiding "merge commits" that can clutter the history with unnecessary branches

				1.Fetch the changes from the remote repository (this part is the same as a normal git pull).
				2.Rebase your local changes on top of the fetched changes, instead of merging them. This effectively reapplies your local changes as if they were made after the fetched commits, keeping a cleaner commit history.


			Rebase vs Merge

				Merge: Combines the remote changes with your local branch and creates a "merge commit" that shows both histories converging.

				Rebase: Instead of merging, it takes your local changes and applies them on top of the remote changes, making it look like your changes were made after the fetched changes. This prevents extra "merge commits."

			Benefits of Using git pull --rebase
				
				Cleaner Commit History:

					By avoiding merge commits, you get a cleaner, more linear history that is easier to understand and review.

				Better for Shared Repositories:

					If you're working on a project with multiple contributors, a rebased history often looks simpler and more chronological.

				Avoids Duplicate Merge Commits:

					Merge commits can clutter the history, especially if you frequently pull changes from the remote. Using --rebase eliminates this.


			Handling Conflicts in git pull --rebase

				Just like with a normal merge, conflicts can occur when using git pull --rebase. The difference is in how you resolve them:

				If there’s a conflict, Git will pause the rebase and give you a chance to resolve the conflicts.

				After resolving the conflict, use the following commands to continue the rebase:

					git add <conflicted-file>
					git rebase --continue

				If you want to abort the rebase and go back to your previous state, you can use:

					git rebase --abort

			Setting git pull --rebase as Default

				git config --global pull.rebase true

6.  Check  file differnet before commit object

	In Git, you can check the differences between your staged changes (the changes that are ready to be committed) and the latest commit or a specific commit object. This is useful when you want to verify exactly what has changed before making a commit.

	1.Check Differences Between Working Directory and Staging Area

		To see the changes that have been made in your working directory but not yet staged (i.e., the files you have edited but haven't run git add on yet):

			git diff

	2.  Check Differences Between Staged Changes and the Last Commit

		To check the differences between the staged files (the files you have added with git add) and the latest commit (HEAD), you can use the following command:


			git diff --staged

			git add myfile.txt
			git diff --staged

	3. Check Differences Between the Working Directory and a Specific Commit

		If you want to compare your working directory (modified files) with a specific commit (for example, the last commit or a commit with a specific hash), you can use:

			git diff <commit-hash>

			git diff 36e6875dd0a7a9bbb511710e14dae45a57b8e73e

	4. Check Differences Between Two Specific Commits

		git diff <commit-hash-1> <commit-hash-2>
		git diff 36e6875dd0a7a9bbb511710e14dae45a57b8e73e 7306f1a7d1002d80858be8b9921debafd79719de

	5. Check Differences for a Specific File Before Committing

		If you want to check the differences for a specific file before committing, you can run:

			git diff <file-path>

			git diff myfile.txt

	6. Using git status to Check Differences

		Although git status does not show the actual diff, it is useful to check which files have been modified, staged, or are ready to be committed:


			git status


		This shows a summary of:

			Modified files (but not yet staged).
			Staged files (ready to be committed).
			Untracked files.


		1.Check what has changed but not yet staged:
			git diff
		2.Stage the file:
			git add myfile.txt
		3.Check the differences between the staged file and the last commit:
			git diff --staged
		4. If everything looks good, commit:
			git commit -m "Update myfile.txt"

	7. View Full History and Diffs Using git log with Diffs

		You can also view previous commits with the diffs included to understand how files have changed over time:

			git log -p

--------------------------------------
7.  Commit files to GIT respository
	
	=> To commit files to a Git repository, you can use different commands and options based on your workflow.
	   Here’s a breakdown with examples:

	1. Standard Commit

		Commit all changes to tracked files:

		git add .
		git commit -m "Your commit message"

	2. Adding Only Specific Files

		Commit only specific files instead of all changes:

			git add filename1 filename2
			git commit -m "Commit specific files only"

	3.  Commit with Interactive Mode

		git add -p
		git commit -m "Selective chunk commit"

	4. Amend the Last Commit

		Modify the last commit, adding new changes or adjusting the commit message

		git commit --amend -m "Updated commit message with new changes"

	5.  Skip the Staging Area

		Directly commit changes without staging:

		git commit -a -m "Commit all modified files without staging"

	6.  Commit with Date and Author Override

		Specify a different author or date for the commit:

		git commit --author="Author Name <email@example.com>" --date="YYYY-MM-DD HH:MM:SS" -m "Commit with custom author and date"

	7.  Sign-Off the Commit

		Add a “sign-off” line at the end of the commit message, often used in team collaborations:

		git commit -s -m "Add feature XYZ with sign-off"

		Author: vipul agravat <vipul@indolytics.com>
			
			Date:   Sun Oct 27 00:01:08 2024 +0530
			
			Add feature changes with sign-off

		    Signed-off-by: vipul agravat <vipul@indolytics.com>

	8. Commits Empty (No Changes)

		Create an empty commit to mark a milestone or checkpoint

		git commit --allow-empty -m "Marking milestone without file changes"

	9.  Squash Commits

		Combine multiple commits into one (useful for cleanup before merging):


		git rebase -i HEAD~N  # Replace N with the number of commits to squash
		# In the interactive editor, mark commits to be squashed with 's

	10.  Commit in Verbose Mode

		Show the commit diff in the command output for verification:

		git commit -v -m "Commit with diff view"

		=== More option


		1. Using Templates for Commit Messages

			Use a predefined template for commit messages to maintain consistency (like a checklist for each commit):
			
			First, create a template file (e.g., .gitmessage.txt):

		2. Set the template for all commits:

			git config --global commit.template C:/wamp64/www/selfLearn_tut/.gitmessage.txt

		3. Reverting Commits

			To undo a specific commit while preserving the history, use git revert:

			git revert <commit-hash>

8.  Check git status [Untracked files, Changes not staged for commit, Changes to be committed]

	The git status command gives a detailed view of your current working directory and staging area.

	1. Untracked Files
		Description: Untracked files are files in your working directory that Git is not currently tracking. They haven’t been staged or committed before.

		Cause: These files appear because you created or moved them into the repository directory, but Git does not yet know to include them in the version control system.

		Status Message: Untracked files: followed by a list of files. These files will not be included in a commit unless explicitly staged.


		Example

			Untracked files:
  			(use "git add <file>..." to include in what will be committed)
        		new_file.txt
        		src/new_script.js

        -> To track these files, add them using git add <file>.
		-> To ignore them, you can add them to your .gitignore file, so they no longer show up in git status.
	 
	 2. Changes Not Staged for Commit

	 		Description: These are modifications to files that Git already tracks but haven’t been staged for the next commit. This includes edits to files that were already part of the repository but haven’t been added to the staging area.

			Cause: You edited a tracked file but haven’t added it to the staging area, so it’s recognized by Git but not yet ready to commit.

			Example

			Changes not staged for commit:
			  (use "git add <file>..." to update what will be committed)
			  (use "git restore <file>..." to discard changes in working directory)
			        modified:   existing_file.txt
			        modified:   src/updated_script.js

			  -> Stage the Changes: Use git add <file> to move the changes to the staging area for the next commit.
			  -> Discard the Changes: Use git restore <file> if you want to discard changes in a file and revert it to the last committed state.

	3.Changes to Be Committed

			Description: These are changes that have been added to the staging area (also known as the index). They are ready to be committed to the repository.

			Cause: You added modified files to the staging area, making them ready to be part of the next commit. Files in this section won’t change unless you modify, stage, or unstage them.

			Example

				
				Changes to be committed:
				  (use "git restore --staged <file>..." to unstage)
				        new file:   new_file.txt
				        modified:   existing_file.txt

			-> Commit the Changes: Use git commit -m "Commit message" to finalize these changes and store them in the repository.

			-> Unstage a File: Use git restore --staged <file> to remove a file from the staging area without discarding its changes.
			 
9.  Undo changes from modi
10. Reset modified files
11. Reset commited objects before push [hard reset]
12. Push commited files to GIT repository
13. Check GIT logs 
14. Show particular commited object
15. Stash the changes and how to apply changes back from stash
16. GIT multiple branches [dev, master, 6.0, 6.0.1, 6.0.2]
17. Create local GIT branch
18. Push local GIT branch and make it remote branch
19. Move between GIT branches
20. Cherry-pick objects from one branch to another branch
21. Continue cherry-pick and abort cherry-pick process
22. Merge changes from one branch to another branch
23. Rebase from one branch to another branch
24. Clone GIT repository with specific branch
25. git Ignore

		=> To ignore files or directories in Git, you need to use a special file called .gitignore. This file tells Git which files or patterns to ignore, meaning they won’t be tracked or shown in git status. Here’s a step-by-step guide:

			1.Create or Open the .gitignore File

				In your repository’s root directory, create a .gitignore file if it doesn’t exist
			
			2.Add Files or Directories to .gitignore

				- Add specific file names or patterns to .gitignore. Here are some common use cases:
				
					Example

					# Ignore a specific file
					secrets.txt

				- Ignore Files by Extension

					*.log
				- Ignore Specific Directory

					/node_modules/
					/public

				- Ignore All Files in a Folder Except One

					config/*
					!config/app.test.js
				
				- Ignore Files in Nested Directories

				 **/.env

			3.Save the .gitignore File

				Once you’ve added the patterns, save the .gitignore file.
			4. Ensure Ignored Files Are Not Tracked by Git
				
				If the file you want to ignore is already tracked by Git (already in the repository), you need to untrack it first. Use:

				git rm --cached <filename>

			5.  Commit Your .gitignore File

				After updating your .gitignore, you can commit the changes

				git add .gitignore
				git commit -m "Add .gitignore file"

			6. Verify Ignored Files Are Not Listed

				Run git status to ensure ignored files are no longer appearing in the list of untracked or tracked files.

1. https://www.sitepoint.com/git-for-beginners/
2. https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/
3. https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet
4.http://internal-docs.fads6.fiareads.com/index.php?id=91

youtube
	https://youtu.be/6El8Ia4fYDc?si=3hi-9eLFqPk-6woJ
	https://youtu.be/cFViH1UnU6M?si=IY0yA4FBRpCbFdPg
	https://youtu.be/QKVarScQigI?si=N8MXVbQbbDN_-thd




Summary

1/2	git init: Initializes a new Git repository in your local directory.
	git add .: Adds files to the staging area.
	git commit -m "message": Commits the changes to the repository.
	git clone [URL]: Clones an existing repository from a remote server to your local machine.
	git push origin main: Pushes local commits to the remote repository.


	----
3
	Use git config --global user.name "Your Name" and git config --global user.email "youremail@example.com" to set your global Git name and email.
	Use git config --global --list to verify the configuration.
	For repository-specific settings, use git config user.name "Repo Name" and git config user.email "repo@example.com".
	
	-----
4 Summary of Common git add Options
git add .: Adds all changes in the current directory and its subdirectories.
git add -A or git add --all: Adds all changes in the entire repository.
git add filename: Adds a specific file to the staging area.
git add file1 file2 ...: Adds multiple specific files.
git add path/to/directory/: Adds all files in a specific directory.
git add *.extension: Adds all files of a specific extension.
git add -p: Interactive mode for adding changes selectively.
git add -f filename: Forces adding a file that is ignored by .gitignore.


5.	
Summary of git pull

	The git pull command fetches and integrates changes from the remote repository into your local repository.
	Example: git pull origin main pulls changes from the main branch of the origin remote.
	You may encounter merge conflicts that need to be manually resolved if your local changes conflict with the remote changes.
	
	You can use git pull --rebase to keep a linear history when pulling changes.
		
		 --rebase:
			What it does: Fetches changes from the remote and rebases your local changes on top of the remote commits.
			Benefits: Produces a cleaner, linear history without merge commits.
			Conflicts: If conflicts arise, resolve them using git add and git rebase --continue.
			Set as default: You can configure Git to always rebase when pulling with git config --global pull.rebase true.

6.
Summary of Commands Diff:

	git diff: Shows differences between the working directory and the staging area.
	git diff --staged: Shows differences between the staged changes and the last commit.
	git diff <commit-hash>: Shows differences between the current state and a specific commit.
	git diff <commit-hash-1> <commit-hash-2>: Shows differences between two specific commits.
	git status: Shows the current status of the working directory, including modified, staged, and untracked files.

7. Summary of commands 

	git add -A	Stage all changes including untracked files
	git commit --amend --author="Name <Email>"	Amend author of the most recent commit
	git revert <commit-hash>	Create a new commit to undo changes of a specific commit
	git commit --fixup=<commit-hash>	Create a fixup commit to be squashed later
	git commit -S -m "Signed commit"	Create a GPG-signed commit
	git commit -p	Commit only specific parts of files
	git commit --no-verify -m "Commit message"	Commit without running pre-commit hooks
	git reflog	View commit history, including detached and rebased commits
	git push origin <commit-hash>:branch-name --force	Push a specific commit forcefully to a branch (use with caution)
25. Summary git ignore 


	1. Create/Open .gitignore: In the root directory of your repository, create a .gitignore file if it doesn't 	exist using:
	2.Add Patterns to Ignore: Open .gitignore in a text editor and add patterns:

		Ignore specific files: secrets.txt
		Ignore all files with an extension: *.log
		Ignore a directory: /node_modules/
		Ignore files except one: config/* then !config/app.config.js
	
	3.Remove Already Tracked Files: If a file is already tracked, untrack it with:

		git rm --cached <filename>
	4.Commit .gitignore: Add and commit the .gitignore file to the repository:

		git add .gitignore
		git commit -m "Add .gitignore file"

	5.Verify: Run git status to ensure ignored files don’t appear.

		The .gitignore helps keep your repository clean by excluding unnecessary or sensitive files.

8 .Summary of status Commands

Untracked Files :	git add <file>	Track the untracked files
	Add files to .gitignore	Ignore the files permanently

Changes Not Staged for Commit :	git add <file>	Stage changes to the staging area

git restore <file>	Discard local changes and revert to last commit
	Changes to Be Committed	git commit -m "Commit message"	Commit staged changes

git restore --staged <file>	Unstage without discarding change

	Each of these statuses provides visibility into which files are ready to commit, which ones still need staging, and which are entirely new to the repository, allowing you to manage your codebase systematically.
==================================

https://chatgpt.com/c/671c9c06-7844-800b-9766-ff0d0198bcd3