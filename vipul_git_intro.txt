Training >> 2. GIT Back
Trainer: Samir
Introduction:
In this phase of training, trainee will learn about GIT commands, how to use those commands in regular project
practise.
Topics to study


1.  Make GIT repository

	To create a new Git repository, you have two main options:

	1.1.Initialize a New Git Repository Locally: This is useful if you want to start tracking an existing project with Git.
	1.2.Create a New Repository on GitHub/GitLab/Bitbucket and Clone It: This method involves setting up a repository on a remote Git hosting platform and then cloning it to your local machine.


	1. Initialize a New Git Repository Locally


		Step 1: Open Your Terminal or Command Prompt
			Navigate to the root directory of your project:
				cd path/to/your/project
		Step 2: Initialize a New Git Repository
			Run the following command to initialize a new Git repository in your project directory

			git init

				-This command creates a .git folder in your project's root directory. This folder contains all the necessary metadata and object files that Git needs to track changes in your project.

		Step 3: Add Files to the Repository

			You need to add the files you want to track to the staging area. You can add all files in the directory by running:

				git add .

		Step 4: Commit the Changes

			git commit -m "Initial commit"


2.  Clone GIT repository

	- Create a New Repository on GitHub, GitLab, or Bitbucket and Clone It
	- Once you've created the repository, you'll see a URL (either HTTPS or SSH). Use this URL to clone the repository to your local machine.

	Sign in to your account.

		Look for the option to create a new repository (usually a "New" button or "+" icon).

		Fill out the repository information:

		-Repository name: The name of your repository.
		-Description (optional): A description of the repository.
		-Public/Private: Set the visibility of the repository.
		-Initialize with README: (Optional) Create a README file if desired.
		-Click "Create repository" (the button text might vary depending on the platform).

	1)HTTP

		-Step 1 CLONE URL
			
			https://github.com/vipsthedev/selfLearn_tut.git

		-Step 2: Add Files and Make Your First Commit
	   		cd  selfLearn_tut

		-Example

		git clone https://github.com/vipsthedev/selfLearn_tut.git
		PS C:\wamp64\www\selfLearn_tut> git status
		
		On branch main
		Your branch is up to date with 'origin/main'.

		nothing to commit, working tree clean



	-------------

	2)SSH
		if you're using SSH:
		
			git clone git@github.com:username/repository.git

	- Additional Setup for a Remote Repository

	  If you initialized a local repository and want to connect it to a remote repository, you can add the remote URL using:

	    git remote add origin https://github.com/username/repository.git

	    Then push your changes to the remote repository:

	    git push -u origin main

3.  Add global configration like name, email

	- To set up global configurations such as your name and email in Git, use the following commands. This sets the information that will be used in all repositories on your machine.


	1. Set Your Name and Email Globally

		Run these commands in your terminal or command prompt to configure your Git username and email globally:

			git config --global user.name "Your Name"
			git config --global user.email "youremail@example.com"

			Replace "Your Name" with your actual name.
			Replace "youremail@example.com" with your email address.
	
	2. Verify Your Global Configuration

		You can verify that your global configuration has been set by running:

		git config --global --list


		output

		PS C:\wamp64\www\selfLearn_tut> git config --global --list
			user.email=vipul@indolytics.com
			user.name=vipul agravat
			user.password=vipul123456789

	3. Local Configuration (Optional)

		If you want to set the name and email for a specific repository (overriding the global configuration), navigate to that repository's directory and run:

			git config user.name "Specific Repo Name"
			git config user.email "specificrepo@example.com"

	4. Additional Global Configuration


		You can set other global configurations as well, such as the default text editor for Git:

			git config --global core.editor "vim"

			On Windows:

				git config --global core.autocrlf true
				

	5. Configuration File Location

		- The global configuration is stored in a file called .gitconfig in your home directory. You can also edit this file directly to change the settings:

		On Windows: C:\Users\YourUsername\.gitconfig
		On macOS/Linux: ~/.gitconfig

4.  Add files to GIT repositry

	- Add your project files to this directory. Then run:
		git add .
		git commit -m "Initial commit"

	- To add files to a Git repository, you'll go through a few simple steps. 
	  These involve moving your changes into the staging area and then committing them to the repository. 
	  Here’s a detailed explanation of each step

	  	1. Navigate to Your Repository
		2. Check Repository Status
			Before adding files, it's often helpful to see the current status of your repository using:
				git status
		3. Add Files to the Staging Area

			The staging area is where you prepare files that you want to commit. Here’s how to add files to it:


			Option 1: Add All Files

					To add all changes (new files, modified files, and deleted files) in the repository to the staging area, use:

						git add .
						/
						git add -A

							git add . adds all changes in the current directory and all nested subdirectories.

							git add -A stages all changes in the repository, including those outside the current directory. This is equivalent to git add --all.


					
					The . tells Git to add all changes in the current directory and its subdirectories.

			Option 2: Add Specific Files

				If you want to add specific files or directories, specify them like this:
					git add filename1 filename2
				Example	

					git add vipul_selfLearn_tut.text vipul.txt

				You can also add an entire directory:

					git add /php/

			Option 3: Add Changes to a Specific Type of Files

				You can use wildcards to add files of a specific type. For example, to add all .html files:

					git add *.html

			Option 4: Add Changes Interactively

				git add -p


					The -p (or --patch) option opens an interactive mode that allows you to review each change before staging it. This is useful if you want to stage only certain parts of a file.
			
			Option 5: Adding Files in an Ignored Directory

					If you need to add files in a directory that is listed in .gitignore but still want to track some specific files, use the -f flag:

					git add -f path/to/ignored/file.txt

					The -f (or --force) option forces Git to add files that would otherwise be ignored.

		4. Check the Staging Area (Optional)
			
				git status

				Files that are ready to be committed will be shown in green under the "Changes to be committed" section.

		5. Commit the Staged Files


			Once the files are staged, you need to commit them to the repository. This creates a snapshot of the changes in the repository’s history. Use the following command:

			git commit -m "Your commit message here"

	 -  6. Push Changes to Remote Repository (If Applicable)

			- If your repository is connected to a remote server (e.g., GitHub, GitLab, Bitbucket), you'll need to push the changes to make them available on the remote server.
			- If you have made changes to the local repository and want to push them to the remote repository:

		 		git push origin main
		 	
		 	- Note: The default branch might be named main or master. Make sure to use the correct branch name based on your repository settings.
		
		7. Understanding the Staging Area and Committing

			Staging Area: When you use git add, you move files to the staging area. This area allows you to group changes before committing them. You can add files to the staging area incrementally to commit only specific changes.
			Committing: A commit in Git creates a snapshot of the changes. You should always write clear and concise commit messages to describe the changes, as this helps in understanding the project's history.


		Additional Notes
			Ignoring Files
			
				If there are files that you do not want to track (like configuration files, environment files, or build artifacts), you can create a .gitignore file in your repository’s root directory. List the files and directories to ignore in this file.
				Example
					# .gitignore
						node_modules/
						.env
						.DS_Store

			Removing Files

				If you need to remove files from the repository, you can use:

				git rm filename
				git commit -m "Removed filename"

				- To stop tracking a file but keep it locally, use:

					git rm --cached filename

5.  Pull GIT repository
6.  Check  file differnet before commit object
7.  Commit files to GIT respository
8.  Check git status [Untracked files, Changes not staged for commit, Changes to be committed]
9.  Undo changes from modi
10. Reset modified files
11. Reset commited objects before push [hard reset]
12. Push commited files to GIT repository
13. Check GIT logs 
14. Show particular commited object
15. Stash the changes and how to apply changes back from stash
16. GIT multiple branches [dev, master, 6.0, 6.0.1, 6.0.2]
17. Create local GIT branch
18. Push local GIT branch and make it remote branch
19. Move between GIT branches
20. Cherry-pick objects from one branch to another branch
21. Continue cherry-pick and abort cherry-pick process
22. Merge changes from one branch to another branch
23. Rebase from one branch to another branch
24. Clone GIT repository with specific branch

1. https://www.sitepoint.com/git-for-beginners/
2. https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/
3. https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet
4.http://internal-docs.fads6.fiareads.com/index.php?id=91

[6:35 am, 19/10/2024] Agravat Vipul: https://youtu.be/6El8Ia4fYDc?si=3hi-9eLFqPk-6woJ
[6:43 pm, 19/10/2024] Agravat Vipul: https://youtu.be/cFViH1UnU6M?si=IY0yA4FBRpCbFdPg
[6:45 pm, 19/10/2024] Agravat Vipul: https://youtu.be/QKVarScQigI?si=N8MXVbQbbDN_-thd




Summary

1/2	git init: Initializes a new Git repository in your local directory.
	git add .: Adds files to the staging area.
	git commit -m "message": Commits the changes to the repository.
	git clone [URL]: Clones an existing repository from a remote server to your local machine.
	git push origin main: Pushes local commits to the remote repository.


	----
3
	Use git config --global user.name "Your Name" and git config --global user.email "youremail@example.com" to set your global Git name and email.
	Use git config --global --list to verify the configuration.
	For repository-specific settings, use git config user.name "Repo Name" and git config user.email "repo@example.com".
	
	-----
4 Summary of Common git add Options
git add .: Adds all changes in the current directory and its subdirectories.
git add -A or git add --all: Adds all changes in the entire repository.
git add filename: Adds a specific file to the staging area.
git add file1 file2 ...: Adds multiple specific files.
git add path/to/directory/: Adds all files in a specific directory.
git add *.extension: Adds all files of a specific extension.
git add -p: Interactive mode for adding changes selectively.
git add -f filename: Forces adding a file that is ignored by .gitignore.